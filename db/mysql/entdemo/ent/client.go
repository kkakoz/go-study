// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"learn-go/db/mysql/entdemo/ent/migrate"

	"learn-go/db/mysql/entdemo/ent/education"
	"learn-go/db/mysql/entdemo/ent/institution"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Institution is the client for interacting with the Institution builders.
	Institution *InstitutionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Education = NewEducationClient(c.config)
	c.Institution = NewInstitutionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Education:   NewEducationClient(cfg),
		Institution: NewInstitutionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Education:   NewEducationClient(cfg),
		Institution: NewInstitutionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Education.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Education.Use(hooks...)
	c.Institution.Use(hooks...)
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Create returns a create builder for Education.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id int) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EducationClient) DeleteOneID(id int) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id int) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id int) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstitution queries the institution edge of a Education.
func (c *EducationClient) QueryInstitution(e *Education) *InstitutionQuery {
	query := &InstitutionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, education.InstitutionTable, education.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// InstitutionClient is a client for the Institution schema.
type InstitutionClient struct {
	config
}

// NewInstitutionClient returns a client for the Institution from the given config.
func NewInstitutionClient(c config) *InstitutionClient {
	return &InstitutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `institution.Hooks(f(g(h())))`.
func (c *InstitutionClient) Use(hooks ...Hook) {
	c.hooks.Institution = append(c.hooks.Institution, hooks...)
}

// Create returns a create builder for Institution.
func (c *InstitutionClient) Create() *InstitutionCreate {
	mutation := newInstitutionMutation(c.config, OpCreate)
	return &InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Institution entities.
func (c *InstitutionClient) CreateBulk(builders ...*InstitutionCreate) *InstitutionCreateBulk {
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Institution.
func (c *InstitutionClient) Update() *InstitutionUpdate {
	mutation := newInstitutionMutation(c.config, OpUpdate)
	return &InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstitutionClient) UpdateOne(i *Institution) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitution(i))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstitutionClient) UpdateOneID(id int) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitutionID(id))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Institution.
func (c *InstitutionClient) Delete() *InstitutionDelete {
	mutation := newInstitutionMutation(c.config, OpDelete)
	return &InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InstitutionClient) DeleteOne(i *Institution) *InstitutionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InstitutionClient) DeleteOneID(id int) *InstitutionDeleteOne {
	builder := c.Delete().Where(institution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstitutionDeleteOne{builder}
}

// Query returns a query builder for Institution.
func (c *InstitutionClient) Query() *InstitutionQuery {
	return &InstitutionQuery{
		config: c.config,
	}
}

// Get returns a Institution entity by its id.
func (c *InstitutionClient) Get(ctx context.Context, id int) (*Institution, error) {
	return c.Query().Where(institution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstitutionClient) GetX(ctx context.Context, id int) *Institution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InstitutionClient) Hooks() []Hook {
	return c.hooks.Institution
}
