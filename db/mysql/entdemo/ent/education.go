// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"learn-go/db/mysql/entdemo/ent/education"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Education is the model entity for the Education schema.
type Education struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationQuery when eager-loading is set.
	Edges EducationEdges `json:"edges"`
}

// EducationEdges holds the relations/edges for other nodes in the graph.
type EducationEdges struct {
	// Institution holds the value of the institution edge.
	Institution []*Institution `json:"institution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading.
func (e EducationEdges) InstitutionOrErr() ([]*Institution, error) {
	if e.loadedTypes[0] {
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Education) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case education.FieldID:
			values[i] = new(sql.NullInt64)
		case education.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Education", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Education fields.
func (e *Education) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case education.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case education.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		}
	}
	return nil
}

// QueryInstitution queries the "institution" edge of the Education entity.
func (e *Education) QueryInstitution() *InstitutionQuery {
	return (&EducationClient{config: e.config}).QueryInstitution(e)
}

// Update returns a builder for updating this Education.
// Note that you need to call Education.Unwrap() before calling this method if this Education
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Education) Update() *EducationUpdateOne {
	return (&EducationClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Education entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Education) Unwrap() *Education {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Education is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Education) String() string {
	var builder strings.Builder
	builder.WriteString("Education(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Educations is a parsable slice of Education.
type Educations []*Education

func (e Educations) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
