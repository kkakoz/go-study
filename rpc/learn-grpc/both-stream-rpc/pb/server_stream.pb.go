// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_stream.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamRequest struct {
	//流式请求参数
	Request              string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_359fb3680929a7dc, []int{0}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type StreamResponse struct {
	// 流式响应数据
	Answer               string   `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_359fb3680929a7dc, []int{1}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "StreamResponse")
}

func init() { proto.RegisterFile("server_stream.proto", fileDescriptor_359fb3680929a7dc) }

var fileDescriptor_359fb3680929a7dc = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x8a, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57,
	0xd2, 0xe4, 0xe2, 0x0d, 0x06, 0xf3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8,
	0xd8, 0x8b, 0x20, 0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x49, 0x83, 0x8b,
	0x0f, 0xa6, 0xb4, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8c, 0x8b, 0x2d, 0x31, 0xaf, 0xb8,
	0x3c, 0xb5, 0x48, 0x82, 0x09, 0xac, 0x14, 0xca, 0x33, 0xf2, 0xe2, 0x12, 0x70, 0xca, 0x2f, 0xc9,
	0x80, 0xa8, 0x0e, 0x06, 0xdb, 0x2a, 0x64, 0xc6, 0xc5, 0xeb, 0x9c, 0x9f, 0x57, 0x96, 0x5a, 0x54,
	0x9c, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x2c, 0xc4, 0xa7, 0x87, 0x62, 0xb1, 0x14, 0xbf, 0x1e, 0xaa,
	0xe9, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0xec, 0x51, 0xac, 0x7a, 0xfa, 0xd6, 0x05, 0x49,
	0x49, 0x6c, 0x60, 0x07, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x4d, 0xde, 0xa8, 0xc7,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BothStreamServerClient is the client API for BothStreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BothStreamServerClient interface {
	Conversations(ctx context.Context, opts ...grpc.CallOption) (BothStreamServer_ConversationsClient, error)
}

type bothStreamServerClient struct {
	cc *grpc.ClientConn
}

func NewBothStreamServerClient(cc *grpc.ClientConn) BothStreamServerClient {
	return &bothStreamServerClient{cc}
}

func (c *bothStreamServerClient) Conversations(ctx context.Context, opts ...grpc.CallOption) (BothStreamServer_ConversationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BothStreamServer_serviceDesc.Streams[0], "/BothStreamServer/Conversations", opts...)
	if err != nil {
		return nil, err
	}
	x := &bothStreamServerConversationsClient{stream}
	return x, nil
}

type BothStreamServer_ConversationsClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type bothStreamServerConversationsClient struct {
	grpc.ClientStream
}

func (x *bothStreamServerConversationsClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bothStreamServerConversationsClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothStreamServerServer is the server API for BothStreamServer service.
type BothStreamServerServer interface {
	Conversations(BothStreamServer_ConversationsServer) error
}

func RegisterBothStreamServerServer(s *grpc.Server, srv BothStreamServerServer) {
	s.RegisterService(&_BothStreamServer_serviceDesc, srv)
}

func _BothStreamServer_Conversations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BothStreamServerServer).Conversations(&bothStreamServerConversationsServer{stream})
}

type BothStreamServer_ConversationsServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type bothStreamServerConversationsServer struct {
	grpc.ServerStream
}

func (x *bothStreamServerConversationsServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bothStreamServerConversationsServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BothStreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BothStreamServer",
	HandlerType: (*BothStreamServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conversations",
			Handler:       _BothStreamServer_Conversations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server_stream.proto",
}
